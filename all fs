from sklearn.feature_selection import mutual_info_classif
import pandas as pd

def mutual_information_selection(x_train, y_train, top_n=None):
    mi_scores = mutual_info_classif(x_train, y_train, random_state=42)
    mi_df = pd.DataFrame({
        'Feature': x_train.columns,
        'MI Score': mi_scores
    }).sort_values(by='MI Score', ascending=False)
    
    print("Mutual Information Scores:")
    print(mi_df)
    
    # Select top N features
    if top_n:
        selected_features = mi_df.head(top_n)['Feature'].tolist()
        print(f"\nTop {top_n} selected features:")
        print(selected_features)
    else:
        selected_features = mi_df['Feature'].tolist()
        
    return selected_features, mi_df

# Example usage:
# selected_features, mi_df = mutual_information_selection(x_train, y_train, top_n=200)



from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression

def recursive_feature_elimination(x_train, y_train, n_features_to_select=200):
    model = LogisticRegression(max_iter=1000, random_state=42, solver='liblinear')
    rfe = RFE(model, n_features_to_select=n_features_to_select)
    rfe.fit(x_train, y_train)
    
    selected_features = x_train.columns[rfe.support_].tolist()
    ranking_df = pd.DataFrame({
        'Feature': x_train.columns,
        'Ranking': rfe.ranking_
    }).sort_values(by='Ranking')
    
    print(f"Selected {n_features_to_select} features:")
    print(selected_features)
    
    return selected_features, ranking_df

# Example usage:
# selected_features, ranking_df = recursive_feature_elimination(x_train, y_train, n_features_to_select=200)







