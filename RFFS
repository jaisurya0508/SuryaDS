from sklearn.ensemble import RandomForestClassifier
import numpy as np

def forward_selection_rf(x_train, y_train, max_features=200, threshold_in=0.005):
    """
    Perform forward selection using Random Forest based on feature importance.
    
    Parameters:
        x_train (pd.DataFrame): Training features.
        y_train (pd.Series): Training target.
        max_features (int): Maximum number of features to select.
        threshold_in (float): Minimum improvement in feature importance to add a feature.

    Returns:
        selected_features (list): List of selected feature names.
    """
    initial_features = list(x_train.columns)
    selected_features = []
    best_score = -np.inf  # Start with a baseline (low score)

    print(f"Starting Forward Selection with {len(initial_features)} features...")

    while initial_features and len(selected_features) < max_features:
        scores_with_candidates = []

        for feature in initial_features:
            current_features = selected_features + [feature]
            try:
                model = RandomForestClassifier(n_estimators=100, random_state=42)
                model.fit(x_train[current_features], y_train)
                feature_importance = model.feature_importances_[-1]  # Get importance of the new feature
                scores_with_candidates.append((feature, feature_importance))
            except Exception as e:
                print(f"Error with feature {feature}: {e}")
                continue
        
        if not scores_with_candidates:
            print("No more features to evaluate. Stopping.")
            break

        # Sort by feature importance and pick the best feature
        scores_with_candidates.sort(key=lambda x: x[1], reverse=True)
        best_new_feature, best_new_score = scores_with_candidates[0]

        # Add feature if it improves the model's feature importance beyond the threshold
        if best_new_score - best_score > threshold_in:
            selected_features.append(best_new_feature)
            initial_features.remove(best_new_feature)
            best_score = best_new_score
            print(f"Selected Feature: {best_new_feature} | Feature Importance: {best_new_score:.4f}")
        else:
            print("No significant improvement. Stopping.")
            break

    print(f"Forward Selection completed. Selected {len(selected_features)} features.")
    return selected_features
